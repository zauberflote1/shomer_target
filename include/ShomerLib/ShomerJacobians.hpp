// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: jacobian_matrix
 *
 * Args:
 *     camera_T: Matrix31
 *     camera_R: Matrix31
 *     known_point_G: Matrix31
 *     f_x: Scalar
 *     f_y: Scalar
 *     c_x: Scalar
 *     c_y: Scalar
 *
 * Outputs:
 *     res: Matrix26
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 6> JacobianMatrix(const Eigen::Matrix<Scalar, 3, 1>& camera_T,
                                           const Eigen::Matrix<Scalar, 3, 1>& camera_R,
                                           const Eigen::Matrix<Scalar, 3, 1>& known_point_G,
                                           const Scalar f_x, const Scalar f_y, const Scalar c_x,
                                           const Scalar c_y) {
  // Total ops: 273

  // Unused inputs
  (void)c_x;
  (void)c_y;

  // Input arrays

  // Intermediate terms (84)
  const Scalar _tmp0 = std::pow(camera_R(0, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(camera_R(1, 0), Scalar(2));
  const Scalar _tmp2 = std::pow(camera_R(2, 0), Scalar(2));
  const Scalar _tmp3 = _tmp0 + _tmp1 + _tmp2;
  const Scalar _tmp4 = std::sqrt(_tmp3);
  const Scalar _tmp5 = std::sin(_tmp4);
  const Scalar _tmp6 = _tmp5 / _tmp4;
  const Scalar _tmp7 = _tmp6 * camera_R(0, 0);
  const Scalar _tmp8 = std::cos(_tmp4);
  const Scalar _tmp9 = 1 - _tmp8;
  const Scalar _tmp10 = Scalar(1.0) / (_tmp3);
  const Scalar _tmp11 = _tmp10 * _tmp9;
  const Scalar _tmp12 = _tmp11 * camera_R(2, 0);
  const Scalar _tmp13 = _tmp12 * camera_R(1, 0);
  const Scalar _tmp14 = _tmp6 * camera_R(1, 0);
  const Scalar _tmp15 = _tmp12 * camera_R(0, 0);
  const Scalar _tmp16 = _tmp0 * _tmp10;
  const Scalar _tmp17 = -_tmp16;
  const Scalar _tmp18 = _tmp1 * _tmp10;
  const Scalar _tmp19 = -_tmp18;
  const Scalar _tmp20 = _tmp17 + _tmp19;
  const Scalar _tmp21 = camera_T(2, 0) + known_point_G(0, 0) * (-_tmp14 + _tmp15) +
                        known_point_G(1, 0) * (_tmp13 + _tmp7) +
                        known_point_G(2, 0) * (_tmp20 * _tmp9 + 1);
  const Scalar _tmp22 = Scalar(1.0) / (_tmp21);
  const Scalar _tmp23 = _tmp22 * f_x;
  const Scalar _tmp24 = _tmp22 * f_y;
  const Scalar _tmp25 = _tmp10 * _tmp2;
  const Scalar _tmp26 = -_tmp25;
  const Scalar _tmp27 = _tmp19 + _tmp26;
  const Scalar _tmp28 = _tmp6 * camera_R(2, 0);
  const Scalar _tmp29 = _tmp11 * camera_R(1, 0);
  const Scalar _tmp30 = _tmp29 * camera_R(0, 0);
  const Scalar _tmp31 = std::pow(_tmp21, Scalar(-2));
  const Scalar _tmp32 =
      _tmp31 * f_x *
      (camera_T(0, 0) + known_point_G(0, 0) * (_tmp27 * _tmp9 + 1) +
       known_point_G(1, 0) * (-_tmp28 + _tmp30) + known_point_G(2, 0) * (_tmp14 + _tmp15));
  const Scalar _tmp33 = _tmp17 + _tmp26;
  const Scalar _tmp34 =
      _tmp31 * f_y *
      (camera_T(1, 0) + known_point_G(0, 0) * (_tmp28 + _tmp30) +
       known_point_G(1, 0) * (_tmp33 * _tmp9 + 1) + known_point_G(2, 0) * (_tmp13 - _tmp7));
  const Scalar _tmp35 = _tmp5 / (_tmp3 * std::sqrt(_tmp3));
  const Scalar _tmp36 = _tmp0 * _tmp35;
  const Scalar _tmp37 = 2 / std::pow(_tmp3, Scalar(2));
  const Scalar _tmp38 = _tmp37 * camera_R(2, 0);
  const Scalar _tmp39 = _tmp0 * _tmp38;
  const Scalar _tmp40 = _tmp12 + _tmp36 * camera_R(2, 0) - _tmp39 * _tmp9;
  const Scalar _tmp41 = camera_R(0, 0) * camera_R(1, 0);
  const Scalar _tmp42 = _tmp10 * _tmp8;
  const Scalar _tmp43 = _tmp41 * _tmp42;
  const Scalar _tmp44 = _tmp35 * camera_R(0, 0);
  const Scalar _tmp45 = _tmp44 * camera_R(1, 0);
  const Scalar _tmp46 = -_tmp43 + _tmp45;
  const Scalar _tmp47 = _tmp1 * _tmp37 * camera_R(0, 0);
  const Scalar _tmp48 = 2 * _tmp10;
  const Scalar _tmp49 = _tmp37 * [&]() {
    const Scalar base = camera_R(0, 0);
    return base * base * base;
  }() - _tmp48 * camera_R(0, 0);
  const Scalar _tmp50 = _tmp16 * _tmp8;
  const Scalar _tmp51 = -_tmp38 * _tmp41 * _tmp9 + _tmp45 * camera_R(2, 0);
  const Scalar _tmp52 = _tmp51 + _tmp6;
  const Scalar _tmp53 = known_point_G(0, 0) * (_tmp40 + _tmp46) +
                        known_point_G(1, 0) * (-_tmp36 + _tmp50 + _tmp52) +
                        known_point_G(2, 0) * (_tmp20 * _tmp7 + _tmp9 * (_tmp47 + _tmp49));
  const Scalar _tmp54 = _tmp43 - _tmp45;
  const Scalar _tmp55 = _tmp0 * _tmp37 * camera_R(1, 0);
  const Scalar _tmp56 = _tmp29 + _tmp36 * camera_R(1, 0) - _tmp55 * _tmp9;
  const Scalar _tmp57 = _tmp42 * camera_R(0, 0) * camera_R(2, 0);
  const Scalar _tmp58 = _tmp44 * camera_R(2, 0);
  const Scalar _tmp59 = -_tmp57 + _tmp58;
  const Scalar _tmp60 = _tmp2 * _tmp37;
  const Scalar _tmp61 = _tmp60 * camera_R(0, 0);
  const Scalar _tmp62 = _tmp57 - _tmp58;
  const Scalar _tmp63 = _tmp51 - _tmp6;
  const Scalar _tmp64 = _tmp1 * _tmp35;
  const Scalar _tmp65 = _tmp1 * _tmp38;
  const Scalar _tmp66 = _tmp12 + _tmp64 * camera_R(2, 0) - _tmp65 * _tmp9;
  const Scalar _tmp67 = _tmp37 * [&]() {
    const Scalar base = camera_R(1, 0);
    return base * base * base;
  }() - _tmp48 * camera_R(1, 0);
  const Scalar _tmp68 = _tmp18 * _tmp8;
  const Scalar _tmp69 = known_point_G(0, 0) * (_tmp63 + _tmp64 - _tmp68) +
                        known_point_G(1, 0) * (_tmp54 + _tmp66) +
                        known_point_G(2, 0) * (_tmp14 * _tmp20 + _tmp9 * (_tmp55 + _tmp67));
  const Scalar _tmp70 = -_tmp47 * _tmp9 + _tmp64 * camera_R(0, 0);
  const Scalar _tmp71 = _tmp11 * camera_R(0, 0);
  const Scalar _tmp72 = camera_R(1, 0) * camera_R(2, 0);
  const Scalar _tmp73 = _tmp42 * _tmp72;
  const Scalar _tmp74 = _tmp35 * _tmp72;
  const Scalar _tmp75 = _tmp71 - _tmp73 + _tmp74;
  const Scalar _tmp76 = _tmp60 * camera_R(1, 0);
  const Scalar _tmp77 = _tmp71 + _tmp73 - _tmp74;
  const Scalar _tmp78 = _tmp2 * _tmp35;
  const Scalar _tmp79 = -_tmp61 * _tmp9 + _tmp78 * camera_R(0, 0);
  const Scalar _tmp80 = _tmp37 * [&]() {
    const Scalar base = camera_R(2, 0);
    return base * base * base;
  }() - _tmp48 * camera_R(2, 0);
  const Scalar _tmp81 = _tmp25 * _tmp8;
  const Scalar _tmp82 = _tmp29 - _tmp76 * _tmp9 + _tmp78 * camera_R(1, 0);
  const Scalar _tmp83 = known_point_G(0, 0) * (_tmp75 + _tmp79) +
                        known_point_G(1, 0) * (_tmp62 + _tmp82) +
                        known_point_G(2, 0) * (_tmp20 * _tmp28 + _tmp9 * (_tmp39 + _tmp65));

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 6> _res;

  _res(0, 0) = _tmp23;
  _res(1, 0) = 0;
  _res(0, 1) = 0;
  _res(1, 1) = _tmp24;
  _res(0, 2) = -_tmp32;
  _res(1, 2) = -_tmp34;
  _res(0, 3) =
      _tmp23 * (known_point_G(0, 0) * (_tmp27 * _tmp7 + _tmp9 * (_tmp47 + _tmp61)) +
                known_point_G(1, 0) * (_tmp56 + _tmp59) + known_point_G(2, 0) * (_tmp40 + _tmp54)) -
      _tmp32 * _tmp53;
  _res(1, 3) = _tmp24 * (known_point_G(0, 0) * (_tmp56 + _tmp62) +
                         known_point_G(1, 0) * (_tmp33 * _tmp7 + _tmp9 * (_tmp49 + _tmp61)) +
                         known_point_G(2, 0) * (_tmp36 - _tmp50 + _tmp63)) -
               _tmp34 * _tmp53;
  _res(0, 4) = _tmp23 * (known_point_G(0, 0) * (_tmp14 * _tmp27 + _tmp9 * (_tmp67 + _tmp76)) +
                         known_point_G(1, 0) * (_tmp70 + _tmp75) +
                         known_point_G(2, 0) * (_tmp52 - _tmp64 + _tmp68)) -
               _tmp32 * _tmp69;
  _res(1, 4) = _tmp24 * (known_point_G(0, 0) * (_tmp70 + _tmp77) +
                         known_point_G(1, 0) * (_tmp14 * _tmp33 + _tmp9 * (_tmp55 + _tmp76)) +
                         known_point_G(2, 0) * (_tmp46 + _tmp66)) -
               _tmp34 * _tmp69;
  _res(0, 5) = _tmp23 * (known_point_G(0, 0) * (_tmp27 * _tmp28 + _tmp9 * (_tmp65 + _tmp80)) +
                         known_point_G(1, 0) * (_tmp63 + _tmp78 - _tmp81) +
                         known_point_G(2, 0) * (_tmp77 + _tmp79)) -
               _tmp32 * _tmp83;
  _res(1, 5) = _tmp24 * (known_point_G(0, 0) * (_tmp52 - _tmp78 + _tmp81) +
                         known_point_G(1, 0) * (_tmp28 * _tmp33 + _tmp9 * (_tmp39 + _tmp80)) +
                         known_point_G(2, 0) * (_tmp59 + _tmp82)) -
               _tmp34 * _tmp83;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
